tools:
  - name: generate-tool
    description: A tool that generates other tools based on descriptions.
    type: python
    content: |
      import os
      import logging
      from litellm import completion

      # Set up logging
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger(__name__)

      # Ensure API key is set
      os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

      # Function to clarify the tool description
      def clarify_description(description: str) -> str:
          response = completion(
              model="gpt-4o",
              messages=[
                  {
                      "role": "system",
                      "content": (
                          "You are a Product Manager. Your task is to clarify the tool description provided by the user. "
                          "Ensure all necessary information is included. If any information is missing, clearly state what is missing."
                      )
                  },
                  {
                      "role": "user",
                      "content": description
                  }
              ]
          )
          return response['choices'][0]['message']['content']

      # Function to generate the tool specification with examples
      def generate_tool_spec(description: str) -> str:
          response = completion(
              model="gpt-4o",
              messages=[
                  {
                      "role": "system",
                      "content": (
                          "You are a Software Engineer. Your task is to generate the YAML schema for a tool based on the provided description. "
                          "Make sure the schema is complete, follows best practices, and includes any necessary dependencies, arguments, and environment variables. "
                          "Here are some examples of correctly structured YAML schemas:\n\n"
                          "Example 1:\n"
                          "- name: custom-python-script\n"
                          "  description: A custom Python script\n"
                          "  type: python\n"
                          "  content: |\n"
                          "    import sys\n"
                          "    import json\n"
                          "    with open('/data/config.json') as f:\n"
                          "        config = json.load(f)\n"
                          "    print(f\"Hello, {sys.argv[1]}!\")\n"
                          "    print(\"Config settings:\", config)\n"
                          "  dependencies: |\n"
                          "    requests==2.25.1\n"
                          "    numpy==1.21.0\n"
                          "  args:\n"
                          "    name:\n"
                          "      description: Name to greet\n"
                          "      required: true\n"
                          "  env:\n"
                          "    - PYTHON_ENV\n"
                          "  with_files:\n"
                          "    - path: /data/input.txt\n"
                          "      content: \"https://example.com/path/to/input.txt\"\n"
                          "    - path: /data/config.json\n"
                          "      content: |\n"
                          "        {\n"
                          "          \"setting1\": \"value1\",\n"
                          "          \"setting2\": \"value2\",\n"
                          "          \"token\": \"{{.MY_SECRET_TOKEN}}\"\n"
                          "        }\n\n"
                          "Example 2:\n"
                          "- name: custom-bash-script\n"
                          "  description: A custom Bash script\n"
                          "  type: bash\n"
                          "  content: |\n"
                          "    echo \"Reading from file...\"\n"
                          "    cat /data/input.txt\n"
                          "    echo \"Hello, $name!\"\n"
                          "  args:\n"
                          "    name:\n"
                          "      description: Name to greet\n"
                          "      required: true\n"
                          "  with_files:\n"
                          "    - path: /data/input.txt\n"
                          "      content: \"Hello from input file!\"\n\n"
                          "Use these examples to guide your schema generation."
                      )
                  },
                  {
                      "role": "user",
                      "content": description
                  }
              ]
          )
          return response['choices'][0]['message']['content']

      if __name__ == "__main__":
          import argparse

          parser = argparse.ArgumentParser(description='Generate a tool specification based on description.')
          parser.add_argument('--description', type=str, required=True, help='Description of the tool to generate')
          args = parser.parse_args()

          logger.info("Clarifying the description...")
          clarified_description = clarify_description(args.description)
          logger.info(f"Clarified Description: {clarified_description}")

          logger.info("Generating tool specification...")
          tool_spec = generate_tool_spec(clarified_description)
          logger.info(f"Generated Tool Specification:\n{tool_spec}")
          print(tool_spec)
    dependencies: |
      litellm
    args:
      description:
        description: Description of the tool to generate
        required: true
    env:
      - OPENAI_API_KEY
